import { useState, useEffect } from "react"
import type { CreditCard, MerchantCategory, SavingsStats, StorageData } from "~types"
import { storageService } from "~services/storage"
import { savingsTracker } from "~services/savingsTracker"
import { insightsEngine } from "~services/insightsEngine"
import { achievementsService } from "~services/achievementsService"
import { goalsService } from "~services/goalsService"

function IndexPopup() {
  const [activeTab, setActiveTab] = useState<'cards' | 'savings' | 'achievements' | 'settings'>('cards')
  const [cards, setCards] = useState<CreditCard[]>([])
  const [showAddForm, setShowAddForm] = useState(false)
  const [savingsStats, setSavingsStats] = useState<SavingsStats | null>(null)
  const [spendingTrends, setSpendingTrends] = useState<any>(null)
  const [optimizationSuggestions, setOptimizationSuggestions] = useState<any>(null)
  const [smartInsights, setSmartInsights] = useState<any[]>([])
  const [cashbackForecast, setCashbackForecast] = useState<any>(null)
  const [achievements, setAchievements] = useState<any[]>([])
  const [totalPoints, setTotalPoints] = useState<number>(0)
  const [goals, setGoals] = useState<any[]>([])
  const [showGoalForm, setShowGoalForm] = useState(false)
  const [goalAnalytics, setGoalAnalytics] = useState<any>(null)
  const [settings, setSettings] = useState<StorageData['settings']>({
    enableNotifications: true,
    trackSpending: true,
    darkMode: false
  })
  const [newCard, setNewCard] = useState({
    name: "",
    category: "general" as MerchantCategory,
    rewardRate: "",
    hasCap: false,
    capAmount: "",
    capPeriod: "quarterly" as "monthly" | "quarterly" | "yearly"
  })

  useEffect(() => {
    loadCards()
    loadSettings()
    if (activeTab === 'savings') {
      loadSavingsStats()
    }
    if (activeTab === 'achievements') {
      loadAchievements()
    }
    if (activeTab === 'settings') {
      loadGoals()
    }
  }, [activeTab])

  const loadCards = async () => {
    const savedCards = await storageService.getCards()
    setCards(savedCards)
  }

  const loadSavingsStats = async () => {
    const stats = await savingsTracker.getSavingsStats()
    setSavingsStats(stats)
    
    // Load enhanced analytics
    const trends = await savingsTracker.getSpendingTrends()
    setSpendingTrends(trends)
    
    const suggestions = await savingsTracker.getOptimizationSuggestions()
    setOptimizationSuggestions(suggestions)
    
    // Load AI-powered insights
    const insights = await insightsEngine.generateSmartInsights()
    setSmartInsights(insights)
    
    // Load cashback forecasting
    const forecast = await savingsTracker.getCashbackForecast()
    setCashbackForecast(forecast)
  }

  const loadSettings = async () => {
    const savedSettings = await storageService.getSettings()
    setSettings(savedSettings)
  }

  const updateSettings = async (newSettings: Partial<StorageData['settings']>) => {
    const updatedSettings = { ...settings, ...newSettings }
    setSettings(updatedSettings)
    await storageService.saveSettings(updatedSettings)
  }

  const loadAchievements = async () => {
    const userAchievements = await achievementsService.getUserAchievements()
    setAchievements(userAchievements)
    
    const points = await achievementsService.getTotalPoints()
    setTotalPoints(points)
  }

  const loadGoals = async () => {
    await goalsService.updateGoalProgress()
    const activeGoals = await goalsService.getActiveGoals()
    setGoals(activeGoals)
    
    const analytics = await goalsService.getGoalAnalytics()
    setGoalAnalytics(analytics)
  }

  const addCard = async () => {
    if (!newCard.name || !newCard.rewardRate) return

    const card: CreditCard = {
      id: Date.now().toString(),
      name: newCard.name,
      rewardStructure: [{
        category: newCard.category,
        rewardRate: parseFloat(newCard.rewardRate) / 100,
        ...(newCard.hasCap && {
          cap: {
            amount: parseFloat(newCard.capAmount),
            period: newCard.capPeriod,
            currentUsage: 0
          }
        })
      }],
      isActive: true,
      createdAt: new Date()
    }

    await storageService.saveCard(card)
    await loadCards()
    setShowAddForm(false)
    setNewCard({
      name: "",
      category: "general",
      rewardRate: "",
      hasCap: false,
      capAmount: "",
      capPeriod: "quarterly"
    })
  }

  const deleteCard = async (cardId: string) => {
    await storageService.deleteCard(cardId)
    await loadCards()
  }

  // Theme definitions
  const lightTheme = {
    background: "#ffffff",
    cardBackground: "#ffffff",
    text: "#000000",
    textSecondary: "#666666",
    textMuted: "#999999",
    border: "#e5e7eb",
    borderDashed: "#d1d5db",
    emptyStateBackground: "#f9fafb",
    primary: "#4F46E5",
    primaryText: "#ffffff",
    success: "#10b981",
    warning: "#f59e0b",
    danger: "#ef4444",
    inputBackground: "#ffffff",
    inputBorder: "#d1d5db",
    tabBorder: "#e5e7eb"
  }

  const darkTheme = {
    background: "#1f2937",
    cardBackground: "#374151",
    text: "#f9fafb",
    textSecondary: "#d1d5db",
    textMuted: "#9ca3af",
    border: "#4b5563",
    borderDashed: "#6b7280",
    emptyStateBackground: "#374151", 
    primary: "#6366f1",
    primaryText: "#ffffff",
    success: "#10b981",
    warning: "#f59e0b",
    danger: "#ef4444",
    inputBackground: "#374151",
    inputBorder: "#6b7280",
    tabBorder: "#4b5563"
  }

  const theme = settings.darkMode ? darkTheme : lightTheme

  return (
    <div style={{ 
      width: 400, 
      minHeight: 500, 
      padding: 16, 
      fontFamily: "system-ui",
      background: theme.background,
      color: theme.text
    }}>
      <div style={{ marginBottom: 20 }}>
        <h3 style={{ margin: 0, marginBottom: 12, color: theme.text }}>💳 Credit Card Assistant</h3>
        
        {/* Tab Navigation */}
        <div style={{ display: "flex", borderBottom: `1px solid ${theme.tabBorder}`, marginBottom: 16 }}>
          <button
            onClick={() => setActiveTab('cards')}
            style={{
              flex: 1,
              padding: "8px 0",
              border: "none",
              background: "none",
              borderBottom: activeTab === 'cards' ? `2px solid ${theme.primary}` : "2px solid transparent",
              color: activeTab === 'cards' ? theme.primary : theme.textSecondary,
              fontWeight: activeTab === 'cards' ? 600 : 400,
              cursor: "pointer",
              fontSize: 14
            }}
          >
            My Cards
          </button>
          <button
            onClick={() => setActiveTab('savings')}
            style={{
              flex: 1,
              padding: "8px 0",
              border: "none",
              background: "none",
              borderBottom: activeTab === 'savings' ? `2px solid ${theme.primary}` : "2px solid transparent",
              color: activeTab === 'savings' ? theme.primary : theme.textSecondary,
              fontWeight: activeTab === 'savings' ? 600 : 400,
              cursor: "pointer",
              fontSize: 14
            }}
          >
            Savings
          </button>
          <button
            onClick={() => setActiveTab('achievements')}
            style={{
              flex: 1,
              padding: "8px 0",
              border: "none",
              background: "none",
              borderBottom: activeTab === 'achievements' ? `2px solid ${theme.primary}` : "2px solid transparent",
              color: activeTab === 'achievements' ? theme.primary : theme.textSecondary,
              fontWeight: activeTab === 'achievements' ? 600 : 400,
              cursor: "pointer",
              fontSize: 14
            }}
          >
            Achievements
          </button>
          <button
            onClick={() => setActiveTab('settings')}
            style={{
              flex: 1,
              padding: "8px 0",
              border: "none",
              background: "none",
              borderBottom: activeTab === 'settings' ? `2px solid ${theme.primary}` : "2px solid transparent",
              color: activeTab === 'settings' ? theme.primary : theme.textSecondary,
              fontWeight: activeTab === 'settings' ? 600 : 400,
              cursor: "pointer",
              fontSize: 14
            }}
          >
            Settings
          </button>
        </div>
      </div>

      {activeTab === 'cards' && !showAddForm ? (
        <div>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 16 }}>
            <h4 style={{ margin: 0, color: theme.text }}>Your Cards ({cards.length})</h4>
            <button
              onClick={() => setShowAddForm(true)}
              style={{
                background: theme.primary,
                color: theme.primaryText,
                border: "none",
                borderRadius: 6,
                padding: "8px 16px",
                fontSize: 14,
                cursor: "pointer"
              }}
            >
              + Add Card
            </button>
          </div>

          {cards.length === 0 ? (
            <div style={{ 
              textAlign: "center", 
              padding: 40, 
              background: theme.emptyStateBackground, 
              borderRadius: 8,
              border: `2px dashed ${theme.borderDashed}`
            }}>
              <div style={{ fontSize: 24, marginBottom: 8 }}>🎯</div>
              <p style={{ margin: 0, color: theme.textSecondary }}>No cards added yet</p>
              <p style={{ margin: 0, fontSize: 12, color: theme.textMuted }}>
                Add your credit cards to start getting recommendations
              </p>
            </div>
          ) : (
            <div style={{ gap: 8 }}>
              {cards.map(card => (
                <div key={card.id} style={{
                  border: `1px solid ${theme.border}`,
                  borderRadius: 8,
                  padding: 12,
                  marginBottom: 8,
                  background: theme.cardBackground
                }}>
                  <div style={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start" }}>
                    <div style={{ flex: 1 }}>
                      <div style={{ fontWeight: 600, marginBottom: 4, color: theme.text }}>{card.name}</div>
                      {card.rewardStructure.map((rule, idx) => (
                        <div key={idx} style={{ fontSize: 12, color: theme.textSecondary, marginBottom: 2 }}>
                          {(rule.rewardRate * 100).toFixed(1)}% on {rule.category}
                          {rule.cap && ` (${rule.cap.period} cap: $${rule.cap.amount})`}
                        </div>
                      ))}
                    </div>
                    <button
                      onClick={() => deleteCard(card.id)}
                      style={{
                        background: "none",
                        border: "none",
                        color: theme.danger,
                        cursor: "pointer",
                        padding: 4,
                        fontSize: 12
                      }}
                    >
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      ) : activeTab === 'cards' && showAddForm ? (
        <div>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 16 }}>
            <h4 style={{ margin: 0, color: theme.text }}>Add New Card</h4>
            <button
              onClick={() => setShowAddForm(false)}
              style={{ background: "none", border: "none", fontSize: 18, cursor: "pointer", color: theme.textSecondary }}
            >
              ×
            </button>
          </div>

          <div style={{ gap: 12 }}>
            <div style={{ marginBottom: 12 }}>
              <label style={{ display: "block", fontSize: 12, marginBottom: 4, fontWeight: 500, color: theme.text }}>
                Card Name
              </label>
              <input
                type="text"
                value={newCard.name}
                onChange={(e) => setNewCard({...newCard, name: e.target.value})}
                placeholder="e.g., Chase Freedom"
                style={{
                  width: "100%",
                  padding: 8,
                  border: `1px solid ${theme.inputBorder}`,
                  borderRadius: 4,
                  fontSize: 14,
                  background: theme.inputBackground,
                  color: theme.text
                }}
              />
            </div>

            <div style={{ marginBottom: 12 }}>
              <label style={{ display: "block", fontSize: 12, marginBottom: 4, fontWeight: 500, color: theme.text }}>
                Category
              </label>
              <select
                value={newCard.category}
                onChange={(e) => setNewCard({...newCard, category: e.target.value as MerchantCategory})}
                style={{
                  width: "100%",
                  padding: 8,
                  border: `1px solid ${theme.inputBorder}`,
                  borderRadius: 4,
                  fontSize: 14,
                  background: theme.inputBackground,
                  color: theme.text
                }}
              >
                <option value="general">General</option>
                <option value="groceries">Groceries</option>
                <option value="gas">Gas</option>
                <option value="travel">Travel</option>
                <option value="dining">Dining</option>
                <option value="online">Online</option>
                <option value="department_stores">Department Stores</option>
                <option value="electronics">Electronics</option>
                <option value="pharmacy">Pharmacy</option>
                <option value="warehouse_clubs">Warehouse Clubs</option>
              </select>
            </div>

            <div style={{ marginBottom: 12 }}>
              <label style={{ display: "block", fontSize: 12, marginBottom: 4, fontWeight: 500, color: theme.text }}>
                Reward Rate (%)
              </label>
              <input
                type="number"
                value={newCard.rewardRate}
                onChange={(e) => setNewCard({...newCard, rewardRate: e.target.value})}
                placeholder="5"
                step="0.1"
                style={{
                  width: "100%",
                  padding: 8,
                  border: `1px solid ${theme.inputBorder}`,
                  borderRadius: 4,
                  fontSize: 14,
                  background: theme.inputBackground,
                  color: theme.text
                }}
              />
            </div>

            <div style={{ marginBottom: 12 }}>
              <label style={{ display: "flex", alignItems: "center", fontSize: 12, cursor: "pointer", color: theme.text }}>
                <input
                  type="checkbox"
                  checked={newCard.hasCap}
                  onChange={(e) => setNewCard({...newCard, hasCap: e.target.checked})}
                  style={{ marginRight: 8 }}
                />
                Has spending cap
              </label>
            </div>

            {newCard.hasCap && (
              <div style={{ marginBottom: 12, paddingLeft: 20 }}>
                <div style={{ display: "flex", gap: 8 }}>
                  <div style={{ flex: 1 }}>
                    <label style={{ display: "block", fontSize: 12, marginBottom: 4, fontWeight: 500, color: theme.text }}>
                      Cap Amount ($)
                    </label>
                    <input
                      type="number"
                      value={newCard.capAmount}
                      onChange={(e) => setNewCard({...newCard, capAmount: e.target.value})}
                      placeholder="500"
                      style={{
                        width: "100%",
                        padding: 8,
                        border: `1px solid ${theme.inputBorder}`,
                        borderRadius: 4,
                        fontSize: 14,
                        background: theme.inputBackground,
                        color: theme.text
                      }}
                    />
                  </div>
                  <div style={{ flex: 1 }}>
                    <label style={{ display: "block", fontSize: 12, marginBottom: 4, fontWeight: 500, color: theme.text }}>
                      Period
                    </label>
                    <select
                      value={newCard.capPeriod}
                      onChange={(e) => setNewCard({...newCard, capPeriod: e.target.value as any})}
                      style={{
                        width: "100%",
                        padding: 8,
                        border: `1px solid ${theme.inputBorder}`,
                        borderRadius: 4,
                        fontSize: 14,
                        background: theme.inputBackground,
                        color: theme.text
                      }}
                    >
                      <option value="monthly">Monthly</option>
                      <option value="quarterly">Quarterly</option>
                      <option value="yearly">Yearly</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            <button
              onClick={addCard}
              disabled={!newCard.name || !newCard.rewardRate}
              style={{
                width: "100%",
                background: newCard.name && newCard.rewardRate ? theme.primary : theme.border,
                color: theme.primaryText,
                border: "none",
                borderRadius: 6,
                padding: 12,
                fontSize: 14,
                cursor: newCard.name && newCard.rewardRate ? "pointer" : "not-allowed",
                marginTop: 8
              }}
            >
              Add Card
            </button>
          </div>
        </div>
      ) : activeTab === 'savings' ? (
        <div>
          {savingsStats ? (
            <div>
              <h4 style={{ margin: 0, marginBottom: 16, color: theme.text }}>Your Savings</h4>
              
              {/* Summary Cards */}
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 12, marginBottom: 20 }}>
                <div style={{
                  background: "linear-gradient(135deg, #10b981 0%, #059669 100%)",
                  color: "white",
                  padding: 16,
                  borderRadius: 8,
                  textAlign: "center"
                }}>
                  <div style={{ fontSize: 24, fontWeight: 600, marginBottom: 4 }}>
                    ${savingsStats.totalSaved.toFixed(2)}
                  </div>
                  <div style={{ fontSize: 12, opacity: 0.9 }}>Total Saved</div>
                </div>
                
                <div style={{
                  background: "linear-gradient(135deg, #f59e0b 0%, #d97706 100%)",
                  color: "white",
                  padding: 16,
                  borderRadius: 8,
                  textAlign: "center"
                }}>
                  <div style={{ fontSize: 24, fontWeight: 600, marginBottom: 4 }}>
                    ${savingsStats.totalMissed.toFixed(2)}
                  </div>
                  <div style={{ fontSize: 12, opacity: 0.9 }}>Missed Savings</div>
                </div>
              </div>

              {/* Monthly Breakdown */}
              <div style={{ marginBottom: 20 }}>
                <h5 style={{ margin: 0, marginBottom: 12, fontSize: 14, fontWeight: 600 }}>
                  Monthly Breakdown
                </h5>
                <div style={{ gap: 8 }}>
                  {savingsStats.monthlyStats.map((monthData, idx) => (
                    <div key={idx} style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      padding: "8px 0",
                      borderBottom: idx < savingsStats.monthlyStats.length - 1 ? "1px solid #f3f4f6" : "none"
                    }}>
                      <div style={{ fontSize: 13, fontWeight: 500 }}>
                        {monthData.month}
                      </div>
                      <div style={{ display: "flex", gap: 12, fontSize: 12 }}>
                        <span style={{ color: "#10b981" }}>
                          +${monthData.saved.toFixed(2)}
                        </span>
                        <span style={{ color: "#f59e0b" }}>
                          -${monthData.missed.toFixed(2)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Spending Trends */}
              {spendingTrends && (
                <div style={{ marginBottom: 20 }}>
                  <h5 style={{ margin: 0, marginBottom: 12, fontSize: 14, fontWeight: 600, color: theme.text }}>
                    📈 Spending Analysis
                  </h5>
                  
                  {/* Category Breakdown */}
                  <div style={{ marginBottom: 16 }}>
                    <div style={{ fontSize: 12, fontWeight: 500, marginBottom: 8, color: theme.textSecondary }}>
                      Top Categories
                    </div>
                    {spendingTrends.categoryBreakdown.slice(0, 3).map((cat: any, idx: number) => (
                      <div key={idx} style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "6px 0",
                        borderBottom: idx < 2 ? `1px solid ${theme.border}` : "none"
                      }}>
                        <span style={{ fontSize: 12, color: theme.text }}>{cat.category}</span>
                        <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
                          <span style={{ fontSize: 12, color: theme.textSecondary }}>
                            ${cat.amount.toFixed(0)}
                          </span>
                          <span style={{ fontSize: 11, color: theme.textMuted }}>
                            ({cat.percentage.toFixed(1)}%)
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Average Order Value */}
                  <div style={{
                    background: theme.emptyStateBackground,
                    border: `1px solid ${theme.border}`,
                    borderRadius: 6,
                    padding: 12,
                    textAlign: "center"
                  }}>
                    <div style={{ fontSize: 18, fontWeight: 600, marginBottom: 2, color: theme.text }}>
                      ${spendingTrends.averageOrderValue.toFixed(2)}
                    </div>
                    <div style={{ fontSize: 11, color: theme.textSecondary }}>Average Order Value</div>
                  </div>
                </div>
              )}

              {/* Optimization Suggestions */}
              {optimizationSuggestions && (
                <div style={{ marginBottom: 20 }}>
                  <h5 style={{ margin: 0, marginBottom: 12, fontSize: 14, fontWeight: 600, color: theme.text }}>
                    🎯 Optimization Insights
                  </h5>
                  
                  {optimizationSuggestions.potentialAnnualSavings > 0 && (
                    <div style={{
                      background: "linear-gradient(135deg, #10b981 0%, #059669 100%)",
                      color: "white",
                      padding: 12,
                      borderRadius: 6,
                      marginBottom: 12,
                      textAlign: "center"
                    }}>
                      <div style={{ fontSize: 16, fontWeight: 600, marginBottom: 2 }}>
                        ${optimizationSuggestions.potentialAnnualSavings.toFixed(0)}
                      </div>
                      <div style={{ fontSize: 11, opacity: 0.9 }}>Potential Annual Savings</div>
                    </div>
                  )}

                  {optimizationSuggestions.suggestions.length > 0 && (
                    <div style={{ marginBottom: 12 }}>
                      <div style={{ fontSize: 12, fontWeight: 500, marginBottom: 8, color: theme.textSecondary }}>
                        Recommendations
                      </div>
                      {optimizationSuggestions.suggestions.slice(0, 2).map((suggestion: string, idx: number) => (
                        <div key={idx} style={{
                          background: theme.cardBackground,
                          border: `1px solid ${theme.border}`,
                          borderRadius: 6,
                          padding: 10,
                          marginBottom: 6,
                          fontSize: 11,
                          lineHeight: 1.4,
                          color: theme.textSecondary
                        }}>
                          💡 {suggestion}
                        </div>
                      ))}
                    </div>
                  )}

                  {optimizationSuggestions.cardUtilizationTips.length > 0 && (
                    <div>
                      <div style={{ fontSize: 12, fontWeight: 500, marginBottom: 8, color: theme.textSecondary }}>
                        Card Utilization
                      </div>
                      {optimizationSuggestions.cardUtilizationTips.slice(0, 2).map((tip: string, idx: number) => (
                        <div key={idx} style={{
                          background: theme.cardBackground,
                          border: `1px solid ${theme.border}`,
                          borderRadius: 6,
                          padding: 10,
                          marginBottom: 6,
                          fontSize: 11,
                          lineHeight: 1.4,
                          color: theme.textSecondary
                        }}>
                          📊 {tip}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}

              {/* Cashback Forecast */}
              {cashbackForecast && cashbackForecast.confidenceLevel > 20 && (
                <div style={{ marginBottom: 20 }}>
                  <h5 style={{ margin: 0, marginBottom: 12, fontSize: 14, fontWeight: 600, color: theme.text }}>
                    🔮 Cashback Forecast
                  </h5>
                  
                  {/* Forecast Cards */}
                  <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr 1fr", gap: 8, marginBottom: 16 }}>
                    <div style={{
                      background: "linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)",
                      color: "white",
                      padding: 12,
                      borderRadius: 8,
                      textAlign: "center"
                    }}>
                      <div style={{ fontSize: 16, fontWeight: 600, marginBottom: 2 }}>
                        ${cashbackForecast.nextMonthForecast.toFixed(0)}
                      </div>
                      <div style={{ fontSize: 9, opacity: 0.9 }}>Next Month</div>
                    </div>
                    
                    <div style={{
                      background: "linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)",
                      color: "white",
                      padding: 12,
                      borderRadius: 8,
                      textAlign: "center"
                    }}>
                      <div style={{ fontSize: 16, fontWeight: 600, marginBottom: 2 }}>
                        ${cashbackForecast.quarterlyForecast.toFixed(0)}
                      </div>
                      <div style={{ fontSize: 9, opacity: 0.9 }}>Next Quarter</div>
                    </div>
                    
                    <div style={{
                      background: "linear-gradient(135deg, #10b981 0%, #059669 100%)",
                      color: "white",
                      padding: 12,
                      borderRadius: 8,
                      textAlign: "center"
                    }}>
                      <div style={{ fontSize: 16, fontWeight: 600, marginBottom: 2 }}>
                        ${cashbackForecast.yearlyForecast.toFixed(0)}
                      </div>
                      <div style={{ fontSize: 9, opacity: 0.9 }}>Annual</div>
                    </div>
                  </div>

                  {/* Trends Analysis */}
                  <div style={{
                    background: theme.cardBackground,
                    border: `1px solid ${theme.border}`,
                    borderRadius: 6,
                    padding: 12,
                    marginBottom: 12
                  }}>
                    <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 8 }}>
                      <div style={{ fontSize: 12, fontWeight: 500, color: theme.text }}>Trends Analysis</div>
                      <div style={{ fontSize: 10, color: theme.textMuted }}>
                        {cashbackForecast.confidenceLevel}% confidence
                      </div>
                    </div>
                    
                    <div style={{ display: "flex", gap: 16, fontSize: 11 }}>
                      <div style={{ display: "flex", alignItems: "center", gap: 4 }}>
                        <span style={{ color: cashbackForecast.trendsAnalysis.isIncreasing ? theme.success : theme.textMuted }}>
                          {cashbackForecast.trendsAnalysis.isIncreasing ? '📈' : '📊'}
                        </span>
                        <span style={{ color: theme.textSecondary }}>
                          {cashbackForecast.trendsAnalysis.isIncreasing ? 'Growing' : 'Stable'}
                          {cashbackForecast.trendsAnalysis.changeRate > 0 && 
                            ` (+${cashbackForecast.trendsAnalysis.changeRate.toFixed(1)}%)`
                          }
                        </span>
                      </div>
                      
                      {cashbackForecast.trendsAnalysis.seasonalPattern && (
                        <div style={{ display: "flex", alignItems: "center", gap: 4 }}>
                          <span>🗓️</span>
                          <span style={{ color: theme.textSecondary }}>Seasonal</span>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Category Forecasts */}
                  {cashbackForecast.categoryForecasts.length > 0 && (
                    <div>
                      <div style={{ fontSize: 12, fontWeight: 500, marginBottom: 8, color: theme.textSecondary }}>
                        Top Categories (Monthly)
                      </div>
                      {cashbackForecast.categoryForecasts.slice(0, 3).map((cat: any, idx: number) => (
                        <div key={idx} style={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                          padding: "6px 0",
                          borderBottom: idx < 2 ? `1px solid ${theme.border}` : "none"
                        }}>
                          <span style={{ fontSize: 11, color: theme.text, textTransform: 'capitalize' }}>
                            {cat.category.replace('_', ' ')}
                          </span>
                          <span style={{ fontSize: 11, color: theme.success, fontWeight: 500 }}>
                            +${cat.forecast.toFixed(2)}
                          </span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}

              {/* Smart AI Insights */}
              {smartInsights.length > 0 && (
                <div style={{ marginBottom: 20 }}>
                  <h5 style={{ margin: 0, marginBottom: 12, fontSize: 14, fontWeight: 600, color: theme.text }}>
                    🤖 AI Insights
                  </h5>
                  
                  {smartInsights.slice(0, 3).map((insight: any, idx: number) => {
                    const getInsightIcon = (type: string) => {
                      switch (type) {
                        case 'pattern': return '📊';
                        case 'optimization': return '⚡';
                        case 'warning': return '⚠️';
                        case 'opportunity': return '🎯';
                        default: return '💡';
                      }
                    };

                    const getInsightColor = (impact: string) => {
                      switch (impact) {
                        case 'high': return theme.danger;
                        case 'medium': return theme.warning;
                        case 'low': return theme.success;
                        default: return theme.textSecondary;
                      }
                    };

                    return (
                      <div key={idx} style={{
                        background: theme.cardBackground,
                        border: `1px solid ${theme.border}`,
                        borderRadius: 8,
                        padding: 12,
                        marginBottom: 8
                      }}>
                        <div style={{ display: "flex", alignItems: "flex-start", gap: 8 }}>
                          <div style={{ fontSize: 16, marginTop: 2 }}>
                            {getInsightIcon(insight.type)}
                          </div>
                          <div style={{ flex: 1 }}>
                            <div style={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "flex-start",
                              marginBottom: 4
                            }}>
                              <div style={{ 
                                fontWeight: 600, 
                                fontSize: 13, 
                                color: theme.text,
                                flex: 1
                              }}>
                                {insight.title}
                              </div>
                              <div style={{
                                fontSize: 10,
                                color: getInsightColor(insight.impact),
                                fontWeight: 500,
                                textTransform: 'uppercase',
                                marginLeft: 8
                              }}>
                                {insight.impact}
                              </div>
                            </div>
                            <div style={{ 
                              fontSize: 11, 
                              color: theme.textSecondary, 
                              lineHeight: 1.4,
                              marginBottom: insight.suggestedAction ? 6 : 0
                            }}>
                              {insight.description}
                            </div>
                            {insight.suggestedAction && (
                              <div style={{
                                fontSize: 10,
                                color: theme.primary,
                                fontStyle: 'italic',
                                lineHeight: 1.3
                              }}>
                                💡 {insight.suggestedAction}
                              </div>
                            )}
                            <div style={{
                              display: "flex",
                              justifyContent: "flex-end",
                              marginTop: 6
                            }}>
                              <div style={{
                                fontSize: 9,
                                color: theme.textMuted,
                                opacity: 0.7
                              }}>
                                {insight.confidence}% confidence
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}

              {/* Tips */}
              <div style={{
                background: theme.emptyStateBackground,
                border: `1px solid ${theme.border}`,
                borderRadius: 8,
                padding: 12
              }}>
                <div style={{ fontSize: 12, fontWeight: 500, marginBottom: 4, color: theme.text }}>
                  💡 Quick Tip
                </div>
                <div style={{ fontSize: 11, color: theme.textSecondary, lineHeight: 1.4 }}>
                  {savingsStats.totalMissed > savingsStats.totalSaved
                    ? "You could be saving more! Check our recommendations when shopping."
                    : "Great job optimizing your credit card usage! Keep it up."}
                </div>
              </div>
            </div>
          ) : (
            <div style={{ textAlign: "center", padding: 40 }}>
              <div style={{ fontSize: 24, marginBottom: 8 }}>📊</div>
              <p style={{ margin: 0, color: theme.textSecondary }}>Loading savings data...</p>
            </div>
          )}
        </div>
      ) : activeTab === 'achievements' ? (
        <div>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 16 }}>
            <h4 style={{ margin: 0, color: theme.text }}>Achievements</h4>
            <div style={{
              background: "linear-gradient(135deg, #ffd700 0%, #ffed4e 100%)",
              color: "#1f2937",
              padding: "4px 12px",
              borderRadius: 12,
              fontSize: 12,
              fontWeight: 600,
              display: "flex",
              alignItems: "center",
              gap: 4
            }}>
              <span>⭐</span>
              <span>{totalPoints} points</span>
            </div>
          </div>

          {/* Achievement Categories */}
          {(['savings', 'optimization', 'usage', 'milestone'] as const).map(category => {
            const categoryAchievements = achievements.filter(a => a.category === category);
            if (categoryAchievements.length === 0) return null;

            const categoryTitles = {
              savings: '💰 Savings',
              optimization: '⚡ Optimization', 
              usage: '📊 Usage',
              milestone: '🏆 Milestones'
            };

            return (
              <div key={category} style={{ marginBottom: 20 }}>
                <h5 style={{ 
                  margin: 0, 
                  marginBottom: 12, 
                  fontSize: 14, 
                  fontWeight: 600, 
                  color: theme.text 
                }}>
                  {categoryTitles[category]}
                </h5>
                
                <div style={{ display: "grid", gridTemplateColumns: "1fr", gap: 8 }}>
                  {categoryAchievements.map((achievement, idx) => (
                    <div key={achievement.id} style={{
                      background: achievement.isUnlocked 
                        ? `linear-gradient(135deg, ${achievementsService.getDifficultyColor(achievement.difficulty)}20 0%, ${achievementsService.getDifficultyColor(achievement.difficulty)}10 100%)`
                        : theme.cardBackground,
                      border: achievement.isUnlocked 
                        ? `2px solid ${achievementsService.getDifficultyColor(achievement.difficulty)}40`
                        : `1px solid ${theme.border}`,
                      borderRadius: 8,
                      padding: 12,
                      opacity: achievement.isUnlocked ? 1 : 0.7
                    }}>
                      <div style={{ display: "flex", alignItems: "flex-start", gap: 12 }}>
                        <div style={{ 
                          fontSize: 24, 
                          opacity: achievement.isUnlocked ? 1 : 0.5,
                          filter: achievement.isUnlocked ? 'none' : 'grayscale(100%)'
                        }}>
                          {achievement.icon}
                        </div>
                        
                        <div style={{ flex: 1 }}>
                          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start", marginBottom: 4 }}>
                            <div style={{ 
                              fontWeight: 600, 
                              fontSize: 13, 
                              color: theme.text,
                              display: "flex",
                              alignItems: "center",
                              gap: 6
                            }}>
                              {achievement.title}
                              <span style={{ fontSize: 12 }}>
                                {achievementsService.getDifficultyEmoji(achievement.difficulty)}
                              </span>
                            </div>
                            
                            {achievement.isUnlocked && (
                              <div style={{
                                background: theme.success,
                                color: "white",
                                padding: "2px 6px",
                                borderRadius: 4,
                                fontSize: 9,
                                fontWeight: 600
                              }}>
                                +{achievement.pointsReward}
                              </div>
                            )}
                          </div>
                          
                          <div style={{ 
                            fontSize: 11, 
                            color: theme.textSecondary, 
                            marginBottom: 8,
                            lineHeight: 1.3
                          }}>
                            {achievement.description}
                          </div>
                          
                          {/* Progress Bar */}
                          <div style={{ marginBottom: 4 }}>
                            <div style={{
                              background: theme.border,
                              height: 4,
                              borderRadius: 2,
                              overflow: 'hidden'
                            }}>
                              <div style={{
                                background: achievement.isUnlocked 
                                  ? theme.success 
                                  : theme.primary,
                                height: '100%',
                                width: `${achievement.progress}%`,
                                transition: 'width 0.3s ease'
                              }} />
                            </div>
                          </div>
                          
                          <div style={{ 
                            fontSize: 10, 
                            color: theme.textMuted,
                            display: "flex",
                            justifyContent: "space-between"
                          }}>
                            <span>
                              {achievement.currentValue} / {achievement.target}
                            </span>
                            <span>
                              {achievement.progress.toFixed(0)}%
                            </span>
                          </div>
                          
                          {achievement.isUnlocked && achievement.unlockedAt && (
                            <div style={{
                              fontSize: 9,
                              color: theme.textMuted,
                              marginTop: 4,
                              fontStyle: 'italic'
                            }}>
                              Unlocked {new Date(achievement.unlockedAt).toLocaleDateString()}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            );
          })}

          {/* Achievement Summary */}
          <div style={{
            background: theme.emptyStateBackground,
            border: `1px solid ${theme.border}`,
            borderRadius: 8,
            padding: 16,
            textAlign: "center"
          }}>
            <div style={{ fontSize: 18, marginBottom: 8 }}>🏅</div>
            <div style={{ fontWeight: 600, marginBottom: 4, color: theme.text }}>
              {achievements.filter(a => a.isUnlocked).length} / {achievements.length} Unlocked
            </div>
            <div style={{ fontSize: 11, color: theme.textSecondary }}>
              Keep optimizing your credit card usage to unlock more achievements!
            </div>
          </div>
        </div>
      ) : activeTab === 'settings' ? (
        <div>
          <h4 style={{ margin: 0, marginBottom: 16, color: theme.text }}>Settings</h4>
          
          {/* Dark Mode Toggle */}
          <div style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            padding: 16,
            border: `1px solid ${theme.border}`,
            borderRadius: 8,
            marginBottom: 12,
            background: theme.cardBackground
          }}>
            <div>
              <div style={{ fontWeight: 600, marginBottom: 4, color: theme.text }}>🌙 Dark Mode</div>
              <div style={{ fontSize: 12, color: theme.textSecondary }}>Toggle between light and dark themes</div>
            </div>
            <label style={{ position: "relative", display: "inline-block", width: 44, height: 24 }}>
              <input
                type="checkbox"
                checked={settings.darkMode}
                onChange={(e) => updateSettings({ darkMode: e.target.checked })}
                style={{ opacity: 0, width: 0, height: 0 }}
              />
              <span style={{
                position: "absolute",
                cursor: "pointer",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: settings.darkMode ? theme.primary : "#ccc",
                transition: "0.4s",
                borderRadius: 24
              }}>
                <span style={{
                  position: "absolute",
                  height: 18,
                  width: 18,
                  left: settings.darkMode ? 23 : 3,
                  bottom: 3,
                  backgroundColor: "white",
                  transition: "0.4s",
                  borderRadius: "50%"
                }} />
              </span>
            </label>
          </div>

          {/* Notifications Toggle */}
          <div style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            padding: 16,
            border: `1px solid ${theme.border}`,
            borderRadius: 8,
            marginBottom: 12,
            background: theme.cardBackground
          }}>
            <div>
              <div style={{ fontWeight: 600, marginBottom: 4, color: theme.text }}>🔔 Notifications</div>
              <div style={{ fontSize: 12, color: theme.textSecondary }}>Get alerts for better card recommendations</div>
            </div>
            <label style={{ position: "relative", display: "inline-block", width: 44, height: 24 }}>
              <input
                type="checkbox"
                checked={settings.enableNotifications}
                onChange={(e) => updateSettings({ enableNotifications: e.target.checked })}
                style={{ opacity: 0, width: 0, height: 0 }}
              />
              <span style={{
                position: "absolute",
                cursor: "pointer",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: settings.enableNotifications ? theme.primary : "#ccc",
                transition: "0.4s",
                borderRadius: 24
              }} />
            </label>
          </div>

          {/* Spending Tracking Toggle */}
          <div style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            padding: 16,
            border: `1px solid ${theme.border}`,
            borderRadius: 8,
            marginBottom: 12,
            background: theme.cardBackground
          }}>
            <div>
              <div style={{ fontWeight: 600, marginBottom: 4, color: theme.text }}>📊 Spending Tracking</div>
              <div style={{ fontSize: 12, color: theme.textSecondary }}>Track transactions for savings analytics</div>
            </div>
            <label style={{ position: "relative", display: "inline-block", width: 44, height: 24 }}>
              <input
                type="checkbox"
                checked={settings.trackSpending}
                onChange={(e) => updateSettings({ trackSpending: e.target.checked })}
                style={{ opacity: 0, width: 0, height: 0 }}
              />
              <span style={{
                position: "absolute",
                cursor: "pointer",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: settings.trackSpending ? theme.primary : "#ccc",
                transition: "0.4s",
                borderRadius: 24
              }} />
            </label>
          </div>

          {/* Savings Goals Section */}
          <div style={{ marginBottom: 20 }}>
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 12 }}>
              <h5 style={{ margin: 0, fontSize: 14, fontWeight: 600, color: theme.text }}>
                🎯 Savings Goals
              </h5>
              <button
                onClick={() => setShowGoalForm(!showGoalForm)}
                style={{
                  background: theme.primary,
                  color: theme.primaryText,
                  border: "none",
                  borderRadius: 4,
                  padding: "4px 8px",
                  fontSize: 10,
                  cursor: "pointer"
                }}
              >
                {showGoalForm ? 'Cancel' : '+ Add Goal'}
              </button>
            </div>

            {/* Goal Analytics */}
            {goalAnalytics && (
              <div style={{ marginBottom: 12 }}>
                <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 8, marginBottom: 8 }}>
                  <div style={{
                    background: theme.cardBackground,
                    border: `1px solid ${theme.border}`,
                    borderRadius: 6,
                    padding: 8,
                    textAlign: "center"
                  }}>
                    <div style={{ fontSize: 14, fontWeight: 600, color: theme.text }}>
                      {goalAnalytics.totalActiveGoals}
                    </div>
                    <div style={{ fontSize: 9, color: theme.textSecondary }}>Active Goals</div>
                  </div>
                  <div style={{
                    background: theme.cardBackground,
                    border: `1px solid ${theme.border}`,
                    borderRadius: 6,
                    padding: 8,
                    textAlign: "center"
                  }}>
                    <div style={{ fontSize: 14, fontWeight: 600, color: theme.success }}>
                      ${goalAnalytics.totalSavingsFromGoals.toFixed(0)}
                    </div>
                    <div style={{ fontSize: 9, color: theme.textSecondary }}>Total Earned</div>
                  </div>
                </div>
              </div>
            )}

            {/* Add Goal Form */}
            {showGoalForm && (
              <div style={{
                background: theme.cardBackground,
                border: `1px solid ${theme.border}`,
                borderRadius: 8,
                padding: 12,
                marginBottom: 12
              }}>
                <div style={{ fontSize: 12, fontWeight: 500, marginBottom: 8, color: theme.text }}>
                  Quick Goal Templates
                </div>
                <div style={{ display: "grid", gridTemplateColumns: "1fr", gap: 6 }}>
                  {goalsService.getGoalTemplates().slice(0, 3).map((template, idx) => (
                    <button
                      key={idx}
                      onClick={async () => {
                        const targetDate = new Date();
                        targetDate.setDate(targetDate.getDate() + template.durationDays);
                        await goalsService.createGoal(
                          template.title,
                          template.targetAmount,
                          targetDate,
                          template.description,
                          template.category
                        );
                        setShowGoalForm(false);
                        loadGoals();
                      }}
                      style={{
                        background: "none",
                        border: `1px solid ${theme.border}`,
                        borderRadius: 4,
                        padding: 8,
                        textAlign: "left",
                        cursor: "pointer",
                        color: theme.text
                      }}
                    >
                      <div style={{ fontSize: 11, fontWeight: 500, marginBottom: 2 }}>
                        {template.title}
                      </div>
                      <div style={{ fontSize: 9, color: theme.textSecondary }}>
                        ${template.targetAmount} in {template.durationDays} days
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Active Goals List */}
            {goals.length > 0 ? (
              <div style={{ gap: 8 }}>
                {goals.slice(0, 2).map((goal, idx) => {
                  const progress = goalsService.getGoalProgress(goal);
                  return (
                    <div key={goal.id} style={{
                      background: theme.cardBackground,
                      border: `1px solid ${theme.border}`,
                      borderRadius: 8,
                      padding: 10,
                      marginBottom: 8
                    }}>
                      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start", marginBottom: 6 }}>
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 12, fontWeight: 600, color: theme.text, marginBottom: 2 }}>
                            {goal.title}
                          </div>
                          <div style={{ fontSize: 9, color: theme.textSecondary, marginBottom: 4 }}>
                            ${goal.currentAmount.toFixed(2)} / ${goal.targetAmount} 
                            ({progress.daysRemaining > 0 ? `${progress.daysRemaining} days left` : 'Overdue'})
                          </div>
                        </div>
                        <div style={{ fontSize: 10, color: theme.textMuted }}>
                          {progress.percentage.toFixed(0)}%
                        </div>
                      </div>
                      
                      {/* Progress Bar */}
                      <div style={{ marginBottom: 6 }}>
                        <div style={{
                          background: theme.border,
                          height: 4,
                          borderRadius: 2,
                          overflow: 'hidden'
                        }}>
                          <div style={{
                            background: progress.isOverdue ? theme.warning : theme.success,
                            height: '100%',
                            width: `${Math.min(100, progress.percentage)}%`,
                            transition: 'width 0.3s ease'
                          }} />
                        </div>
                      </div>
                      
                      <div style={{ fontSize: 9, color: theme.textMuted, fontStyle: 'italic' }}>
                        {goalsService.getMotivationalMessage(goal)}
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <div style={{
                background: theme.emptyStateBackground,
                border: `2px dashed ${theme.borderDashed}`,
                borderRadius: 8,
                padding: 16,
                textAlign: "center"
              }}>
                <div style={{ fontSize: 16, marginBottom: 4 }}>🎯</div>
                <div style={{ fontSize: 11, color: theme.textSecondary }}>
                  Set savings goals to stay motivated!
                </div>
              </div>
            )}
          </div>

          {/* Extension Info */}
          <div style={{
            background: theme.emptyStateBackground,
            border: `1px solid ${theme.border}`,
            borderRadius: 8,
            padding: 16,
            textAlign: "center"
          }}>
            <div style={{ fontSize: 18, marginBottom: 8 }}>💳</div>
            <div style={{ fontWeight: 600, marginBottom: 4, color: theme.text }}>SmartCard AI Assistant</div>
            <div style={{ fontSize: 12, color: theme.textSecondary, marginBottom: 8 }}>Version 1.0.0</div>
            <div style={{ fontSize: 11, color: theme.textMuted }}>
              Get optimal credit card recommendations and track your savings across 60+ merchants
            </div>
          </div>
        </div>
      ) : null}
    </div>
  )
}

export default IndexPopup
